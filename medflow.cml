Domain MEDFLOW {
  Subdomain Administracao
  Subdomain Referencia
  Subdomain Atendimento
  Subdomain Financeiro
  Subdomain Compartilhado
}

BoundedContext Administracao implements Administracao {
  type DYNAMIC
  
  Aggregate MedicoAggregate {
    Entity Medico { aggregateRoot -MedicoId id, String nome, String crm, ... }
    ValueObject MedicoId { ... }
  }
  
  Aggregate FuncionarioAggregate {
    Entity Funcionario { aggregateRoot -FuncionarioId id, String nome, String funcao, ... }
    ValueObject FuncionarioId { ... }
  }
}

BoundedContext Catalogo implements Referencia {
  type SUPPORTIVE 
  
  Aggregate TipoExameAggregate {
    Entity TipoExame { 
      aggregateRoot
      -TipoExameId id, -TipoExameEspecialidadeId especialidadeId
      String descricao, String valor, String status
      def void atualizarDescricao(String novaDescricao), def void inativar()
    }
    ValueObject TipoExameId { String id }
    ValueObject TipoExameEspecialidadeId { long id }
  }
  
  Aggregate EspecialidadeAggregate {
    Entity Especialidade { 
      aggregateRoot
      -EspecialidadeId id, String nome, String descricao, boolean ativa
      def void inativar()
    }
    ValueObject EspecialidadeId { long id }
  }
  
  Aggregate MedicamentoAggregate {
    Entity Medicamento { aggregateRoot -MedicamentoId id, String nome, String usoPrincipal, ... }
    ValueObject MedicamentoId { ... }
  }
}

BoundedContext Atendimento implements Atendimento {
  type CORE
  
  Aggregate ConsultaAggregate {
    Entity Consulta { aggregateRoot -ConsultaId id, ... }
  }
  
  Aggregate ExameAggregate {
    Entity Exame { aggregateRoot -ExameId id, ... }
  }
  
  Aggregate ProntuarioAggregate {
    Entity Prontuario { aggregateRoot -ProntuarioId id, ... }
  }
  
  Entity AgendaDoMedico { 
    -MedicoId id
    String data, String horario, String tipoEvento
  }
}

BoundedContext Financeiro implements Financeiro {
  type CORE
  
  Aggregate FaturamentoAggregate {
    Entity Faturamento { 
      aggregateRoot 
      -FaturamentoId id, -PacienteId pacienteId
      String valor, -MetodoPagamentoId metodoId
      String statusCobranca, date dataRegistro
    }
    ValueObject FaturamentoId { String id }
    ValueObject MetodoPagamentoId { String id }
  }
}

BoundedContext Compartilhado implements Compartilhado {
  type GENERIC_SUBDOMAIN
  
  ValueObject CPF { String numero }
  ValueObject Telefone { String numero }
  ValueObject Endereco { String logradouro, String cidade, ... }
  ValueObject DataNascimento { date data }
  
  Aggregate PacienteAggregate {
    Entity Paciente {
      aggregateRoot
      -PacienteId id
      String nome
      -CPF cpf
      -DataNascimento dataNascimento
      -Telefone telefone
      -Endereco endereco
      String status
      
      def void atualizarContato(@Telefone novoTelefone, @Endereco novoEndereco);
      def void ativar();
      def void inativar();
      
      Repository PacienteRepository {
        @Paciente obterPorCpf(@CPF cpf);
        List<@Paciente> pesquisarPorNome(String nome);
      }
    }
    ValueObject PacienteId { int id }
  }
  
  Service EventoService {
    def void postarEvento(String evento, String payload);
  }
}

ContextMap MedFlowMap {
  contains Administracao, Catalogo, Atendimento, Financeiro, Compartilhado
  
  Atendimento [D] -> Compartilhado [U]
  Atendimento [D] -> Catalogo [U]
  Financeiro [D] -> Compartilhado [U]
  Financeiro [D] -> Atendimento [U]
  Catalogo [D] -> Compartilhado [U]
  Administracao [D] -> Compartilhado [U]
}
