<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="br.com.medflow.dominio.prontuario.RunCucumberTest" time="0.198" tests="19" errors="11" skipped="0" failures="7">
  <properties>
    <property name="java.specification.version" value="25"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-booter/3.0.0/surefire-booter-3.0.0.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-api/3.0.0/surefire-api-3.0.0.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-extensions-spi/3.0.0/surefire-extensions-spi-3.0.0.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-logger-api/3.0.0/surefire-logger-api-3.0.0.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-shared-utils/3.0.0/surefire-shared-utils-3.0.0.jar:/Users/paulorago/Repositories /MedFlow/dominio-prontuario/target/test-classes:/Users/paulorago/Repositories /MedFlow/dominio-prontuario/target/classes:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.2/junit-jupiter-5.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/paulorago/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.2/junit-jupiter-params-5.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-java/7.14.0/cucumber-java-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-core/7.14.0/cucumber-core-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-gherkin/7.14.0/cucumber-gherkin-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.14.0/cucumber-gherkin-messages-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/gherkin/26.2.0/gherkin-26.2.0.jar:/Users/paulorago/.m2/repository/io/cucumber/messages/22.0.0/messages-22.0.0.jar:/Users/paulorago/.m2/repository/io/cucumber/tag-expressions/5.0.6/tag-expressions-5.0.6.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-expressions/16.1.2/cucumber-expressions-16.1.2.jar:/Users/paulorago/.m2/repository/io/cucumber/datatable/7.14.0/datatable-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-plugin/7.14.0/cucumber-plugin-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/docstring/7.14.0/docstring-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/html-formatter/20.4.0/html-formatter-20.4.0.jar:/Users/paulorago/.m2/repository/io/cucumber/junit-xml-formatter/0.2.0/junit-xml-formatter-0.2.0.jar:/Users/paulorago/.m2/repository/io/cucumber/ci-environment/9.2.0/ci-environment-9.2.0.jar:/Users/paulorago/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-junit/7.14.0/cucumber-junit-7.14.0.jar:/Users/paulorago/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/paulorago/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.14.0/cucumber-junit-platform-engine-7.14.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-engine/1.10.0/junit-platform-engine-1.10.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite/1.9.2/junit-platform-suite-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-api/1.9.2/junit-platform-suite-api-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.9.2/junit-platform-suite-engine-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.9.2/junit-platform-suite-commons-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-launcher/1.9.2/junit-platform-launcher-1.9.2.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/surefire-junit-platform/3.0.0/surefire-junit-platform-3.0.0.jar:/Users/paulorago/.m2/repository/org/apache/maven/surefire/common-java5/3.0.0/common-java5-3.0.0.jar"/>
    <property name="java.vm.vendor" value="Homebrew"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="user.timezone" value="America/Recife"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="25"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk/25/libexec/openjdk.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="org.apache.maven.surefire.booter.ForkedBooter /Users/paulorago/Repositories /MedFlow/dominio-prontuario/target/surefire 2025-10-19T21-40-07_413-jvmRun1 surefire-20251019214007452_1tmp surefire_0-20251019214007452_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/paulorago/Repositories /MedFlow/dominio-prontuario/target/test-classes:/Users/paulorago/Repositories /MedFlow/dominio-prontuario/target/classes:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.2/junit-jupiter-5.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar:/Users/paulorago/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-commons/1.9.2/junit-platform-commons-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.2/junit-jupiter-params-5.9.2.jar:/Users/paulorago/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-java/7.14.0/cucumber-java-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-core/7.14.0/cucumber-core-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-gherkin/7.14.0/cucumber-gherkin-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.14.0/cucumber-gherkin-messages-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/gherkin/26.2.0/gherkin-26.2.0.jar:/Users/paulorago/.m2/repository/io/cucumber/messages/22.0.0/messages-22.0.0.jar:/Users/paulorago/.m2/repository/io/cucumber/tag-expressions/5.0.6/tag-expressions-5.0.6.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-expressions/16.1.2/cucumber-expressions-16.1.2.jar:/Users/paulorago/.m2/repository/io/cucumber/datatable/7.14.0/datatable-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-plugin/7.14.0/cucumber-plugin-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/docstring/7.14.0/docstring-7.14.0.jar:/Users/paulorago/.m2/repository/io/cucumber/html-formatter/20.4.0/html-formatter-20.4.0.jar:/Users/paulorago/.m2/repository/io/cucumber/junit-xml-formatter/0.2.0/junit-xml-formatter-0.2.0.jar:/Users/paulorago/.m2/repository/io/cucumber/ci-environment/9.2.0/ci-environment-9.2.0.jar:/Users/paulorago/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-junit/7.14.0/cucumber-junit-7.14.0.jar:/Users/paulorago/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/paulorago/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/paulorago/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.14.0/cucumber-junit-platform-engine-7.14.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-engine/1.10.0/junit-platform-engine-1.10.0.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite/1.9.2/junit-platform-suite-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-api/1.9.2/junit-platform-suite-api-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.9.2/junit-platform-suite-engine-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.9.2/junit-platform-suite-commons-1.9.2.jar:/Users/paulorago/.m2/repository/org/junit/platform/junit-platform-launcher/1.9.2/junit-platform-launcher-1.9.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/paulorago"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-09-16"/>
    <property name="java.home" value="/opt/homebrew/Cellar/openjdk/25/libexec/openjdk.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/paulorago/Repositories /MedFlow/dominio-prontuario"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="25"/>
    <property name="user.name" value="paulorago"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.6.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Homebrew"/>
    <property name="localRepository" value="/Users/paulorago/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/n0/dc5hw0cd1hvb90bgm7t0j4180000gn/T/"/>
    <property name="java.version" value="25"/>
    <property name="user.dir" value="/Users/paulorago/Repositories /MedFlow/dominio-prontuario"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/paulorago/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Homebrew"/>
    <property name="java.vm.version" value="25"/>
    <property name="stdin.encoding" value="UTF-8"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="69.0"/>
  </properties>
  <testcase name="RN1 - Arquivar prontuário com permissão administrativa (sucesso)" classname="Arquivar ou excluir prontuários" time="0.063">
    <failure message="expected: &lt;null&gt; but was: &lt;java.time.format.DateTimeParseException: Text &apos;21/09/2025 10:05 às 10:05&apos; could not be parsed at index 11&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 10:05 às 10:05' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_estado_do_prontuário_deve_mudar_para(HistoricoClinicoFuncionalidade.java:340)
	at ✽.o estado do prontuário deve mudar para "Arquivado"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:13)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ArquivarProntuario)
Scenario: RN1 - Arquivar prontuário com permissão administrativa (sucesso)                                                                        &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1001"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-001"&amp#27;[0m                                                                                      &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Ana Lima"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m                                                                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo motivo do arquivamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"Inatividade superior a 5 anos"&amp#27;[0m                                                                                  &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_do_arquivamento_é(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma usuária arquivar o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1001"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 10:05"&amp#27;[0m                                                                           &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_usuária_arquivar_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo estado do prontuário deve mudar para &amp#27;[0m&amp#27;[31m&amp#27;[1m"Arquivado"&amp#27;[0m                                                                                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_estado_do_prontuário_deve_mudar_para(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 10:05 às 10:05' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_estado_do_prontuário_deve_mudar_para(HistoricoClinicoFuncionalidade.java:340)
	at ✽.o estado do prontuário deve mudar para "Arquivado"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:13)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário não deve aparecer em consultas comuns&amp#27;[0m                                                                                          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_não_deve_aparecer_em_consultas_comuns()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve ser gerado log imutável com ação "Arquivar", usuário "Ana Lima", data/hora "21/09/2025 10:05" e motivo "Inatividade superior a 5 anos"&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN1 - Bloquear exclusão por usuário sem permissão (falha)" classname="Arquivar ou excluir prontuários" time="0.011">
    <error message="The step &apos;o motivo informado é &quot;Limpeza de dados&quot;&apos; and 1 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;o motivo informado é {string}&quot;)&#10;public void o_motivo_informado_é(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;deve registrar log de segurança da tentativa negada com usuário, data\\/hora, ação tentada e objeto {string}&quot;)&#10;public void deve_registrar_log_de_segurança_da_tentativa_negada_com_usuário_data_hora_ação_tentada_e_objeto(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'o motivo informado é "Limpeza de dados"' and 1 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("o motivo informado é {string}")
public void o_motivo_informado_é(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("deve registrar log de segurança da tentativa negada com usuário, data\\/hora, ação tentada e objeto {string}")
public void deve_registrar_log_de_segurança_da_tentativa_negada_com_usuário_data_hora_ação_tentada_e_objeto(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ExcluirProntuario)
Scenario: RN1 - Bloquear exclusão por usuário sem permissão (falha)                                                &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:18&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1002"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-002"&amp#27;[0m                                                       &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Beatriz Melo"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Atendente"&amp#27;[0m                                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[33mAnd &amp#27;[0m&amp#27;[33mo motivo informado é "Limpeza de dados"&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36ma usuária tentar excluir o prontuário &amp#27;[0m&amp#27;[36m&amp#27;[1m"PRT-1002"&amp#27;[0m&amp#27;[36m em &amp#27;[0m&amp#27;[36m&amp#27;[1m"21/09/2025 10:20"&amp#27;[0m                                      &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_usuária_tentar_excluir_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve negar a ação informando &amp#27;[0m&amp#27;[36m&amp#27;[1m"permissão administrativa necessária"&amp#27;[0m                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_negar_a_ação_informando(java.lang.String)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mnenhum arquivamento ou exclusão deve ocorrer&amp#27;[0m                                                                 &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.nenhum_arquivamento_ou_exclusão_deve_ocorrer()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve registrar log de segurança da tentativa negada com usuário, data/hora, ação tentada e objeto "PRT-1002"&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN2 - Registrar log completo ao arquivar (sucesso)" classname="Arquivar ou excluir prontuários" time="0.007">
    <error message="The step &apos;deve ser criado log com campos: objeto &quot;PRT-1100&quot;, ação &quot;Arquivar&quot;, usuário &quot;Carlos Souza&quot;, data/hora &quot;21/09/2025 10:30&quot;, motivo &quot;Óbito&quot;&apos; and 1 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Then(&quot;deve ser criado log com campos: objeto {string}, ação {string}, usuário {string}, data\\/hora {string}, motivo {string}&quot;)&#10;public void deve_ser_criado_log_com_campos_objeto_ação_usuário_data_hora_motivo(String string, String string2, String string3, String string4, String string5) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o log deve ser imutável e acessível apenas a perfis de auditoria\\/gestão&quot;)&#10;public void o_log_deve_ser_imutável_e_acessível_apenas_a_perfis_de_auditoria_gestão() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'deve ser criado log com campos: objeto "PRT-1100", ação "Arquivar", usuário "Carlos Souza", data/hora "21/09/2025 10:30", motivo "Óbito"' and 1 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Then("deve ser criado log com campos: objeto {string}, ação {string}, usuário {string}, data\\/hora {string}, motivo {string}")
public void deve_ser_criado_log_com_campos_objeto_ação_usuário_data_hora_motivo(String string, String string2, String string3, String string4, String string5) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o log deve ser imutável e acessível apenas a perfis de auditoria\\/gestão")
public void o_log_deve_ser_imutável_e_acessível_apenas_a_perfis_de_auditoria_gestão() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ArquivarProntuario)
Scenario: RN2 - Registrar log completo ao arquivar (sucesso)                                                                                    &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:28&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1100"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-010"&amp#27;[0m                                                                                    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Carlos Souza"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m                                                                          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo motivo do arquivamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"Óbito"&amp#27;[0m                                                                                                        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_do_arquivamento_é(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário arquivar o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1100"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 10:30"&amp#27;[0m                                                                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_arquivar_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[33mThen &amp#27;[0m&amp#27;[33mdeve ser criado log com campos: objeto "PRT-1100", ação "Arquivar", usuário "Carlos Souza", data/hora "21/09/2025 10:30", motivo "Óbito"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo log deve ser imutável e acessível apenas a perfis de auditoria/gestão&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN2 - Rejeitar ação quando motivo não for informado (falha)" classname="Arquivar ou excluir prontuários" time="0.007">
    <failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_a_operacao_informando(HistoricoClinicoFuncionalidade.java:392)
	at ✽.o sistema deve rejeitar a operação informando "motivo é obrigatório"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:42)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ArquivarProntuario)
Scenario: RN2 - Rejeitar ação quando motivo não for informado (falha)          &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:37&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1200"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-020"&amp#27;[0m                   &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Ana Lima"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m             &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo motivo não foi informado&amp#27;[0m                                               &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_não_foi_informado()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma usuária tentar arquivar o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1200"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 10:35"&amp#27;[0m &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_usuária_tentar_arquivar_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve rejeitar a operação informando &amp#27;[0m&amp#27;[31m&amp#27;[1m"motivo é obrigatório"&amp#27;[0m    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_a_operacao_informando(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_a_operacao_informando(HistoricoClinicoFuncionalidade.java:392)
	at ✽.o sistema deve rejeitar a operação informando "motivo é obrigatório"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:42)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mnenhum log incompleto deve ser criado&amp#27;[0m                                    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.nenhum_log_incompleto_deve_ser_criado()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário deve permanecer &amp#27;[0m&amp#27;[36m&amp#27;[1m"Ativo"&amp#27;[0m                                     &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_deve_permanecer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN3 - Arquivar mantém registro fora de consultas comuns e preservado em base segura (sucesso)" classname="Arquivar ou excluir prontuários" time="0.005">
    <error message="The step &apos;existe o prontuário &quot;PRT-1300&quot; do paciente &quot;PAC-030&quot; em estado &quot;Ativo&quot;&apos; and 1 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;existe o prontuário {string} do paciente {string} em estado {string}&quot;)&#10;public void existe_o_prontuário_do_paciente_em_estado(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o prontuário não deve aparecer nas consultas comuns&quot;)&#10;public void o_prontuário_não_deve_aparecer_nas_consultas_comuns() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'existe o prontuário "PRT-1300" do paciente "PAC-030" em estado "Ativo"' and 1 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("existe o prontuário {string} do paciente {string} em estado {string}")
public void existe_o_prontuário_do_paciente_em_estado(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o prontuário não deve aparecer nas consultas comuns")
public void o_prontuário_não_deve_aparecer_nas_consultas_comuns() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ArquivarProntuario)
Scenario: RN3 - Arquivar mantém registro fora de consultas comuns e preservado em base segura (sucesso) &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:47&amp#27;[0m
  &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mexiste o prontuário "PRT-1300" do paciente "PAC-030" em estado "Ativo"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo usuário &amp#27;[0m&amp#27;[36m&amp#27;[1m"Mariana Reis"&amp#27;[0m&amp#27;[36m possui papel &amp#27;[0m&amp#27;[36m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m                                  &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo motivo do arquivamento é &amp#27;[0m&amp#27;[36m&amp#27;[1m"Inatividade superior a 5 anos"&amp#27;[0m                                        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_do_arquivamento_é(java.lang.String)&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36ma usuária arquivar o prontuário &amp#27;[0m&amp#27;[36m&amp#27;[1m"PRT-1300"&amp#27;[0m&amp#27;[36m em &amp#27;[0m&amp#27;[36m&amp#27;[1m"21/09/2025 10:45"&amp#27;[0m                                 &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_usuária_arquivar_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo prontuário não deve aparecer nas consultas comuns&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário deve estar disponível na base segura de arquivados&amp#27;[0m                                   &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_deve_estar_disponível_na_base_segura_de_arquivados()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve ser possível reativar posteriormente mediante ação &amp#27;[0m&amp#27;[36m&amp#27;[1m"Reativar"&amp#27;[0m&amp#27;[36m com log correspondente&amp#27;[0m         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.deve_ser_possível_reativar_posteriormente_mediante_ação_com_log_correspondente(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN3 - Impedir exibição de arquivados em consultas comuns (falha de acesso)" classname="Arquivar ou excluir prontuários" time="0.004">
    <error message="Text &apos;21/09/2025 11:00 às 10:00&apos; could not be parsed at index 11" type="java.time.format.DateTimeParseException"><![CDATA[java.time.format.DateTimeParseException: Text '21/09/2025 11:00 às 10:00' could not be parsed at index 11
	at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2108)
	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:2010)
	at java.base/java.time.LocalDateTime.parse(LocalDateTime.java:496)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidadeBase.parseDateTime(HistoricoClinicoFuncionalidadeBase.java:164)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_realiza_uma_consulta_comum_de_prontuários_às(HistoricoClinicoFuncionalidade.java:101)
	at ✽.o usuário "Operador" realiza uma consulta comum de prontuários às "21/09/2025 11:00"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:59)
]]></error>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @query(ListarProntuarios)
Scenario: RN3 - Impedir exibição de arquivados em consultas comuns (falha de acesso)                                  &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:57&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mo prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-1300"&amp#27;[0m&amp#27;[32m está em estado &amp#27;[0m&amp#27;[32m&amp#27;[1m"Arquivado"&amp#27;[0m                                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_está_em_estado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mAnd &amp#27;[0m&amp#27;[31mo usuário &amp#27;[0m&amp#27;[31m&amp#27;[1m"Operador"&amp#27;[0m&amp#27;[31m realiza uma consulta comum de prontuários às &amp#27;[0m&amp#27;[31m&amp#27;[1m"21/09/2025 11:00"&amp#27;[0m                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_realiza_uma_consulta_comum_de_prontuários_às(java.lang.String,java.lang.String)&amp#27;[0m
      &amp#27;[31mjava.time.format.DateTimeParseException: Text '21/09/2025 11:00 às 10:00' could not be parsed at index 11
	at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2108)
	at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:2010)
	at java.base/java.time.LocalDateTime.parse(LocalDateTime.java:496)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidadeBase.parseDateTime(HistoricoClinicoFuncionalidadeBase.java:164)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_realiza_uma_consulta_comum_de_prontuários_às(HistoricoClinicoFuncionalidade.java:101)
	at ✽.o usuário "Operador" realiza uma consulta comum de prontuários às "21/09/2025 11:00"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:59)
&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36ma listagem padrão for retornada&amp#27;[0m                                                                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_listagem_padrão_for_retornada()&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo prontuário &amp#27;[0m&amp#27;[36m&amp#27;[1m"PRT-1300"&amp#27;[0m&amp#27;[36m não deve constar na listagem&amp#27;[0m                                                           &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_não_deve_constar_na_listagem(java.lang.String)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mum indicador de filtro "incluir arquivados" deve ser necessário para visualização especial por auditoria/gestão&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN4 - Excluir com autorização legal e destruição lógica irreversível (sucesso)" classname="Arquivar ou excluir prontuários" time="0.006">
    <failure message="expected: &lt;null&gt; but was: &lt;java.time.format.DateTimeParseException: Text &apos;21/09/2025 11:10 às 11:10&apos; could not be parsed at index 11&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 11:10 às 11:10' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_realizar_exclusão_irreversível_marcada_como_sem_possibilidade_de_restauração(HistoricoClinicoFuncionalidade.java:429)
	at ✽.o sistema deve realizar exclusão irreversível marcada como "destruição lógica" sem possibilidade de restauração(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:71)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ExcluirProntuario)
Scenario: RN4 - Excluir com autorização legal e destruição lógica irreversível (sucesso)                                                              &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:65&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-2001"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-040"&amp#27;[0m                                                                                          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mhá parecer jurídico anexado autorizando exclusão por &amp#27;[0m&amp#27;[32m&amp#27;[1m"erro cadastral grave"&amp#27;[0m&amp#27;[32m conforme norma aplicável&amp#27;[0m                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.há_parecer_jurídico_anexado_autorizando_exclusão_por_conforme_norma_aplicável(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Carlos Souza"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m                                                                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo motivo da exclusão é &amp#27;[0m&amp#27;[32m&amp#27;[1m"Erro cadastral grave confirmado pela auditoria"&amp#27;[0m                                                                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_da_exclusão_é(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário excluir o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-2001"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 11:10"&amp#27;[0m                                                                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_excluir_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve realizar exclusão irreversível marcada como &amp#27;[0m&amp#27;[31m&amp#27;[1m"destruição lógica"&amp#27;[0m&amp#27;[31m sem possibilidade de restauração&amp#27;[0m                                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_realizar_exclusão_irreversível_marcada_como_sem_possibilidade_de_restauração(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 11:10 às 11:10' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_realizar_exclusão_irreversível_marcada_como_sem_possibilidade_de_restauração(HistoricoClinicoFuncionalidade.java:429)
	at ✽.o sistema deve realizar exclusão irreversível marcada como "destruição lógica" sem possibilidade de restauração(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:71)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mse exigido pela LGPD, realizar deleção definitiva dos dados pessoais&amp#27;[0m                                                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.se_exigido_pela_lgpd_realizar_deleção_definitiva_dos_dados_pessoais()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve ser gerado log com ação "Excluir", usuário "Carlos Souza", data/hora "21/09/2025 11:10", motivo informado e referência ao parecer jurídico&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN4 - Negar exclusão sem autorização legal (falha)" classname="Arquivar ou excluir prontuários" time="0.005">
    <failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_negar_a_operacao_informando_mensagem(HistoricoClinicoFuncionalidade.java:450)
	at ✽.o sistema deve negar a operação informando "exclusão somente com autorização legal"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:82)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(Prontuario) @aggregate(Prontuario) @command(ExcluirProntuario)
Scenario: RN4 - Negar exclusão sem autorização legal (falha)                                          &amp#27;[90m# br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:76&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-2002"&amp#27;[0m&amp#27;[32m do paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-050"&amp#27;[0m                                          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_prontuário_do_paciente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnão há documentação jurídica que autorize a exclusão&amp#27;[0m                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.não_há_documentação_jurídica_que_autorize_a_exclusão()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"Ana Lima"&amp#27;[0m&amp#27;[32m possui papel &amp#27;[0m&amp#27;[32m&amp#27;[1m"Administrador do Sistema"&amp#27;[0m                                    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_usuário_possui_papel(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo motivo da exclusão é &amp#27;[0m&amp#27;[32m&amp#27;[1m"Limpeza de base"&amp#27;[0m                                                        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_motivo_da_exclusão_é(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma usuária tentar excluir o prontuário &amp#27;[0m&amp#27;[32m&amp#27;[1m"PRT-2002"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 11:15"&amp#27;[0m                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_usuária_tentar_excluir_o_prontuário_em(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve negar a operação informando &amp#27;[0m&amp#27;[31m&amp#27;[1m"exclusão somente com autorização legal"&amp#27;[0m            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_negar_a_operacao_informando_mensagem(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_negar_a_operacao_informando_mensagem(HistoricoClinicoFuncionalidade.java:450)
	at ✽.o sistema deve negar a operação informando "exclusão somente com autorização legal"(classpath:br/com/medflow/dominio/prontuario/arquivamento_exclusao_prontuario.feature:82)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário deve permanecer inalterado&amp#27;[0m                                                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_prontuário_deve_permanecer_inalterado()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve registrar log de tentativa negada com usuário, data/hora, ação tentada e objeto "PRT-2002"&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Sucesso — Atualizar prontuário em atendimento ativo (versão e histórico)" classname="Atualização de prontuário do paciente" time="0.005">
    <error message="The step &apos;o paciente &quot;PAC-001&quot; está em atendimento &quot;ATD-1001&quot; iniciado em &quot;21/09/2025&quot; às &quot;09:30&quot;&apos; and 7 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;o paciente {string} está em atendimento {string} iniciado em {string} às {string}&quot;)&#10;public void o_paciente_está_em_atendimento_iniciado_em_às(String string, String string2, String string3, String string4) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Given(&quot;o prontuário {string} está vinculado ao atendimento {string} com status {string}&quot;)&#10;public void o_prontuário_está_vinculado_ao_atendimento_com_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Given(&quot;o profissional responsável é {string} \\(CRM {int})&quot;)&#10;public void o_profissional_responsável_é_crm(String string, Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;a médica registrar uma atualização às {string} com observações {string}&quot;)&#10;public void a_médica_registrar_uma_atualização_às_com_observações(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o sistema deve criar uma nova versão do prontuário vinculada ao atendimento {string}&quot;)&#10;public void o_sistema_deve_criar_uma_nova_versão_do_prontuário_vinculada_ao_atendimento(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;manter as versões anteriores preservadas \\(imutáveis)&quot;)&#10;public void manter_as_versões_anteriores_preservadas_imutáveis() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;manter o status do registro como {string}&quot;)&#10;public void manter_o_status_do_registro_como(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;incluir a atualização no histórico consultável \\(data\\/hora, profissional, resumo da evolução)&quot;)&#10;public void incluir_a_atualização_no_histórico_consultável_data_hora_profissional_resumo_da_evolução() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'o paciente "PAC-001" está em atendimento "ATD-1001" iniciado em "21/09/2025" às "09:30"' and 7 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("o paciente {string} está em atendimento {string} iniciado em {string} às {string}")
public void o_paciente_está_em_atendimento_iniciado_em_às(String string, String string2, String string3, String string4) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("o prontuário {string} está vinculado ao atendimento {string} com status {string}")
public void o_prontuário_está_vinculado_ao_atendimento_com_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("o profissional responsável é {string} \\(CRM {int})")
public void o_profissional_responsável_é_crm(String string, Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("a médica registrar uma atualização às {string} com observações {string}")
public void a_médica_registrar_uma_atualização_às_com_observações(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o sistema deve criar uma nova versão do prontuário vinculada ao atendimento {string}")
public void o_sistema_deve_criar_uma_nova_versão_do_prontuário_vinculada_ao_atendimento(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("manter as versões anteriores preservadas \\(imutáveis)")
public void manter_as_versões_anteriores_preservadas_imutáveis() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("manter o status do registro como {string}")
public void manter_o_status_do_registro_como(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("incluir a atualização no histórico consultável \\(data\\/hora, profissional, resumo da evolução)")
public void incluir_a_atualização_no_histórico_consultável_data_hora_profissional_resumo_da_evolução() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(Prontuario) @command(AtualizarProntuario)
Scenario: Sucesso — Atualizar prontuário em atendimento ativo (versão e histórico)                                 &amp#27;[90m# br/com/medflow/dominio/prontuario/atualizacao_prontuario.feature:8&amp#27;[0m
  &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mo paciente "PAC-001" está em atendimento "ATD-1001" iniciado em "21/09/2025" às "09:30"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário "PRT-1001" está vinculado ao atendimento "ATD-1001" com status "Ativo"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo profissional responsável é "Dra. Ana Lima" (CRM 12345)&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36ma médica registrar uma atualização às "10:05" com observações "Evolução favorável, PA 12x8, ajuste de dose"&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve criar uma nova versão do prontuário vinculada ao atendimento "ATD-1001"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mmanter as versões anteriores preservadas (imutáveis)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mmanter o status do registro como "Ativo"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mincluir a atualização no histórico consultável (data/hora, profissional, resumo da evolução)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha — Tentativa de atualização sem vínculo de atendimento válido" classname="Atualização de prontuário do paciente" time="0.005">
    <error message="The step &apos;o profissional &quot;Dr. Carlos Souza&quot; tenta atualizar o prontuário &quot;PRT-2002&quot; do paciente &quot;PAC-010&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;o profissional {string} tenta atualizar o prontuário {string} do paciente {string}&quot;)&#10;public void o_profissional_tenta_atualizar_o_prontuário_do_paciente(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Given(&quot;não há atendimento ativo vinculado \\(ID do atendimento ausente ou encerrado)&quot;)&#10;public void não_há_atendimento_ativo_vinculado_id_do_atendimento_ausente_ou_encerrado() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;o médico registrar a atualização às {string} com observações {string}&quot;)&#10;public void o_médico_registrar_a_atualização_às_com_observações(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o sistema deve impedir a atualização informando que cada atualização deve estar vinculada a um atendimento válido&quot;)&#10;public void o_sistema_deve_impedir_a_atualização_informando_que_cada_atualização_deve_estar_vinculada_a_um_atendimento_válido() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;nenhum registro de versão deve ser criado&quot;)&#10;public void nenhum_registro_de_versão_deve_ser_criado() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;deve ser registrado um log de tentativa negada \\(usuário, data\\/hora, motivo)&quot;)&#10;public void deve_ser_registrado_um_log_de_tentativa_negada_usuário_data_hora_motivo() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'o profissional "Dr. Carlos Souza" tenta atualizar o prontuário "PRT-2002" do paciente "PAC-010"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("o profissional {string} tenta atualizar o prontuário {string} do paciente {string}")
public void o_profissional_tenta_atualizar_o_prontuário_do_paciente(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("não há atendimento ativo vinculado \\(ID do atendimento ausente ou encerrado)")
public void não_há_atendimento_ativo_vinculado_id_do_atendimento_ausente_ou_encerrado() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("o médico registrar a atualização às {string} com observações {string}")
public void o_médico_registrar_a_atualização_às_com_observações(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o sistema deve impedir a atualização informando que cada atualização deve estar vinculada a um atendimento válido")
public void o_sistema_deve_impedir_a_atualização_informando_que_cada_atualização_deve_estar_vinculada_a_um_atendimento_válido() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("nenhum registro de versão deve ser criado")
public void nenhum_registro_de_versão_deve_ser_criado() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("deve ser registrado um log de tentativa negada \\(usuário, data\\/hora, motivo)")
public void deve_ser_registrado_um_log_de_tentativa_negada_usuário_data_hora_motivo() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(Prontuario) @command(AtualizarProntuario)
Scenario: Falha — Tentativa de atualização sem vínculo de atendimento válido                                             &amp#27;[90m# br/com/medflow/dominio/prontuario/atualizacao_prontuario.feature:19&amp#27;[0m
  &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mo profissional "Dr. Carlos Souza" tenta atualizar o prontuário "PRT-2002" do paciente "PAC-010"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mnão há atendimento ativo vinculado (ID do atendimento ausente ou encerrado)&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mo médico registrar a atualização às "10:20" com observações "Novo sintoma relatado: cefaleia"&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve impedir a atualização informando que cada atualização deve estar vinculada a um atendimento válido&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mnenhum registro de versão deve ser criado&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve ser registrado um log de tentativa negada (usuário, data/hora, motivo)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Finalização do atendimento inativa o registro e bloqueia novas entradas" classname="Atualização de prontuário do paciente" time="0.004">
    <error message="The step &apos;o paciente &quot;PAC-001&quot; possui o prontuário &quot;PRT-1001&quot; com atualizações vinculadas ao atendimento &quot;ATD-1001&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;o paciente {string} possui o prontuário {string} com atualizações vinculadas ao atendimento {string}&quot;)&#10;public void o_paciente_possui_o_prontuário_com_atualizações_vinculadas_ao_atendimento(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Given(&quot;o profissional {string} solicita a finalização do atendimento às {string}&quot;)&#10;public void o_profissional_solicita_a_finalização_do_atendimento_às(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;o atendimento {string} for finalizado&quot;)&#10;public void o_atendimento_for_finalizado(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o sistema deve alterar o status das atualizações daquele atendimento para {string}&quot;)&#10;public void o_sistema_deve_alterar_o_status_das_atualizações_daquele_atendimento_para(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o prontuário permanece consultável \\(histórico preservado), porém novas atualizações não podem ser adicionadas nesse atendimento&quot;)&#10;public void o_prontuário_permanece_consultável_histórico_preservado_porém_novas_atualizações_não_podem_ser_adicionadas_nesse_atendimento() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;para registrar novas evoluções, o sistema deve exigir a abertura de novo atendimento \\(nova vinculação)&quot;)&#10;public void para_registrar_novas_evoluções_o_sistema_deve_exigir_a_abertura_de_novo_atendimento_nova_vinculação() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'o paciente "PAC-001" possui o prontuário "PRT-1001" com atualizações vinculadas ao atendimento "ATD-1001"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("o paciente {string} possui o prontuário {string} com atualizações vinculadas ao atendimento {string}")
public void o_paciente_possui_o_prontuário_com_atualizações_vinculadas_ao_atendimento(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("o profissional {string} solicita a finalização do atendimento às {string}")
public void o_profissional_solicita_a_finalização_do_atendimento_às(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("o atendimento {string} for finalizado")
public void o_atendimento_for_finalizado(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o sistema deve alterar o status das atualizações daquele atendimento para {string}")
public void o_sistema_deve_alterar_o_status_das_atualizações_daquele_atendimento_para(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o prontuário permanece consultável \\(histórico preservado), porém novas atualizações não podem ser adicionadas nesse atendimento")
public void o_prontuário_permanece_consultável_histórico_preservado_porém_novas_atualizações_não_podem_ser_adicionadas_nesse_atendimento() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("para registrar novas evoluções, o sistema deve exigir a abertura de novo atendimento \\(nova vinculação)")
public void para_registrar_novas_evoluções_o_sistema_deve_exigir_a_abertura_de_novo_atendimento_nova_vinculação() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(Prontuario) @command(FinalizarAtendimento)
Scenario: Finalização do atendimento inativa o registro e bloqueia novas entradas                                                     &amp#27;[90m# br/com/medflow/dominio/prontuario/atualizacao_prontuario.feature:28&amp#27;[0m
  &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mo paciente "PAC-001" possui o prontuário "PRT-1001" com atualizações vinculadas ao atendimento "ATD-1001"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo profissional "Dra. Ana Lima" solicita a finalização do atendimento às "10:40"&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mo atendimento "ATD-1001" for finalizado&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve alterar o status das atualizações daquele atendimento para "Inativado"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo prontuário permanece consultável (histórico preservado), porém novas atualizações não podem ser adicionadas nesse atendimento&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mpara registrar novas evoluções, o sistema deve exigir a abertura de novo atendimento (nova vinculação)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Consulta do histórico completo (linhas do tempo por atendimento e versão)" classname="Atualização de prontuário do paciente" time="0.004">
    <error message="The step &apos;o prontuário &quot;PRT-1001&quot; possui múltiplas versões vinculadas aos atendimentos &quot;ATD-1001&quot; e &quot;ATD-1020&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;o prontuário {string} possui múltiplas versões vinculadas aos atendimentos {string} e {string}&quot;)&#10;public void o_prontuário_possui_múltiplas_versões_vinculadas_aos_atendimentos_e(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Given(&quot;o usuário {string} \\(perfil permitido) solicita a visualização do histórico às {string}&quot;)&#10;public void o_usuário_perfil_permitido_solicita_a_visualização_do_histórico_às(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;o histórico do prontuário for consultado&quot;)&#10;public void o_histórico_do_prontuário_for_consultado() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o sistema deve exibir a linha do tempo de evoluções em ordem cronológica, agrupadas por atendimento \\(ID do atendimento, data\\/hora, profissional, resumo)&quot;)&#10;public void o_sistema_deve_exibir_a_linha_do_tempo_de_evoluções_em_ordem_cronológica_agrupadas_por_atendimento_id_do_atendimento_data_hora_profissional_resumo() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;cada versão anterior deve estar acessível em modo somente leitura, garantindo a imutabilidade&quot;)&#10;public void cada_versão_anterior_deve_estar_acessível_em_modo_somente_leitura_garantindo_a_imutabilidade() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;deve ser possível filtrar por atendimento, período e profissional responsável&quot;)&#10;public void deve_ser_possível_filtrar_por_atendimento_período_e_profissional_responsável() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'o prontuário "PRT-1001" possui múltiplas versões vinculadas aos atendimentos "ATD-1001" e "ATD-1020"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("o prontuário {string} possui múltiplas versões vinculadas aos atendimentos {string} e {string}")
public void o_prontuário_possui_múltiplas_versões_vinculadas_aos_atendimentos_e(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("o usuário {string} \\(perfil permitido) solicita a visualização do histórico às {string}")
public void o_usuário_perfil_permitido_solicita_a_visualização_do_histórico_às(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("o histórico do prontuário for consultado")
public void o_histórico_do_prontuário_for_consultado() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("o sistema deve exibir a linha do tempo de evoluções em ordem cronológica, agrupadas por atendimento \\(ID do atendimento, data\\/hora, profissional, resumo)")
public void o_sistema_deve_exibir_a_linha_do_tempo_de_evoluções_em_ordem_cronológica_agrupadas_por_atendimento_id_do_atendimento_data_hora_profissional_resumo() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("cada versão anterior deve estar acessível em modo somente leitura, garantindo a imutabilidade")
public void cada_versão_anterior_deve_estar_acessível_em_modo_somente_leitura_garantindo_a_imutabilidade() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("deve ser possível filtrar por atendimento, período e profissional responsável")
public void deve_ser_possível_filtrar_por_atendimento_período_e_profissional_responsável() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(Prontuario) @query(ListarProntuarios)
Scenario: Consulta do histórico completo (linhas do tempo por atendimento e versão)                                                                             &amp#27;[90m# br/com/medflow/dominio/prontuario/atualizacao_prontuario.feature:37&amp#27;[0m
  &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mo prontuário "PRT-1001" possui múltiplas versões vinculadas aos atendimentos "ATD-1001" e "ATD-1020"&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo usuário "Mariana Reis" (perfil permitido) solicita a visualização do histórico às "11:00"&amp#27;[0m
  &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mo histórico do prontuário for consultado&amp#27;[0m
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve exibir a linha do tempo de evoluções em ordem cronológica, agrupadas por atendimento (ID do atendimento, data/hora, profissional, resumo)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mcada versão anterior deve estar acessível em modo somente leitura, garantindo a imutabilidade&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mdeve ser possível filtrar por atendimento, período e profissional responsável&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN1 - Registrar histórico com todos os campos obrigatórios (sucesso)" classname="Registro de histórico clínico do paciente" time="0.007">
    <failure message="expected: &lt;null&gt; but was: &lt;java.time.format.DateTimeParseException: Text &apos;21/09/2025 10:15 às 10:15&apos; could not be parsed at index 11&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 10:15 às 10:15' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_criar_um_novo_registro_imutável_vinculado_ao_paciente(HistoricoClinicoFuncionalidade.java:251)
	at ✽.o sistema deve criar um novo registro imutável vinculado ao paciente "PAC-001"(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:15)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @command(RegistrarHistorico)
Scenario: RN1 - Registrar histórico com todos os campos obrigatórios (sucesso)           &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-001"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                           &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Dra. Ana Lima"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Médico"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma profissional registrar um histórico clínico às &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 10:15"&amp#27;[0m&amp#27;[32m com:&amp#27;[0m          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_registrar_um_histórico_clínico_às_com(java.lang.String,io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | febre e mialgia                    |
    | diagnostico | Influenza                          |
    | conduta     | Oseltamivir 75mg 2x/dia por 5 dias |
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve criar um novo registro imutável vinculado ao paciente &amp#27;[0m&amp#27;[31m&amp#27;[1m"PAC-001"&amp#27;[0m    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_criar_um_novo_registro_imutável_vinculado_ao_paciente(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <null> but was: <java.time.format.DateTimeParseException: Text '21/09/2025 10:15 às 10:15' could not be parsed at index 11>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:276)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_criar_um_novo_registro_imutável_vinculado_ao_paciente(HistoricoClinicoFuncionalidade.java:251)
	at ✽.o sistema deve criar um novo registro imutável vinculado ao paciente "PAC-001"(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:15)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo registro deve conter obrigatoriamente sintomas, diagnóstico e conduta/tratamento&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo histórico do paciente deve exibir o novo registro em ordem cronológica&amp#27;[0m           &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_histórico_do_paciente_deve_exibir_o_novo_registro_em_ordem_cronológica()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN1 - Rejeitar registro quando faltar campo obrigatório (falha)" classname="Registro de histórico clínico do paciente" time="0.003">
    <failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_o_registro_informando(HistoricoClinicoFuncionalidade.java:271)
	at ✽.o sistema deve rejeitar o registro informando "diagnóstico é obrigatório"(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:27)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @command(RegistrarHistorico)
Scenario: RN1 - Rejeitar registro quando faltar campo obrigatório (falha)              &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:20&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-002"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enf. Carlos"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enfermeiro"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo profissional tentar registrar um histórico clínico às &amp#27;[0m&amp#27;[32m&amp#27;[1m"21/09/2025 10:25"&amp#27;[0m&amp#27;[32m com:&amp#27;[0m &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_tentar_registrar_um_histórico_clínico_às_com(java.lang.String,io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | tosse seca             |
    | diagnostico | [empty]                |
    | conduta     | sintomáticos e repouso |
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve rejeitar o registro informando &amp#27;[0m&amp#27;[31m&amp#27;[1m"diagnóstico é obrigatório"&amp#27;[0m       &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_o_registro_informando(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:180)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_o_registro_informando(HistoricoClinicoFuncionalidade.java:271)
	at ✽.o sistema deve rejeitar o registro informando "diagnóstico é obrigatório"(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:27)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mnenhum novo registro deve ser criado&amp#27;[0m                                             &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.nenhum_novo_registro_deve_ser_criado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN2 - Registrar histórico associado a paciente previamente cadastrado (sucesso)" classname="Registro de histórico clínico do paciente" time="0.004">
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @command(RegistrarHistorico)
Scenario: RN2 - Registrar histórico associado a paciente previamente cadastrado (sucesso) &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:31&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-003"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Dra. Marina"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Médico"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m               &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma profissional registrar um histórico clínico com:&amp#27;[0m                                 &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_registrar_um_histórico_clínico_com(io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | dor torácica leve   |
    | diagnostico | Bronquite suspeita  |
    | conduta     | Broncodilatador PRN |
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo registro deve ficar associado ao paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-003"&amp#27;[0m                              &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_registro_deve_ficar_associado_ao_paciente(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo histórico consultável do paciente deve refletir a nova entrada&amp#27;[0m                    &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_histórico_consultável_do_paciente_deve_refletir_a_nova_entrada()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN2 - Bloquear registro para paciente inexistente (falha)" classname="Registro de histórico clínico do paciente" time="0.003">
    <error message="The step &apos;nenhum registro deve ser criado&apos; is undefined.&#10;You can implement this step using the snippet(s) below:&#10;&#10;@Then(&quot;nenhum registro deve ser criado&quot;)&#10;public void nenhum_registro_deve_ser_criado() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'nenhum registro deve ser criado' is undefined.
You can implement this step using the snippet(s) below:

@Then("nenhum registro deve ser criado")
public void nenhum_registro_deve_ser_criado() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @command(RegistrarHistorico)
Scenario: RN2 - Bloquear registro para paciente inexistente (falha)            &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:42&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mnão existe cadastro para o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-9999"&amp#27;[0m                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.não_existe_cadastro_para_o_paciente(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enf. Paula"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enfermeiro"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma profissional tentar registrar um histórico clínico com:&amp#27;[0m               &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_tentar_registrar_um_histórico_clínico_com(io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | náusea e tontura   |
    | diagnostico | Refluxo            |
    | conduta     | Omeprazol 20mg/dia |
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve rejeitar o registro informando &amp#27;[0m&amp#27;[32m&amp#27;[1m"paciente não encontrado"&amp#27;[0m &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_o_registro_informando(java.lang.String)&amp#27;[0m
  &amp#27;[33mAnd &amp#27;[0m&amp#27;[33mnenhum registro deve ser criado&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN3 - Data, hora e profissional gravados automaticamente e registro imutável (sucesso)" classname="Registro de histórico clínico do paciente" time="0.003">
    <error message="Cannot invoke &quot;br.com.medflow.dominio.prontuario.HistoricoClinico.getDataHoraRegistro()&quot; because &quot;this.historicoAtual&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "br.com.medflow.dominio.prontuario.HistoricoClinico.getDataHoraRegistro()" because "this.historicoAtual" is null
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_gravar_automaticamente_data_e_hora_da_criação(HistoricoClinicoFuncionalidade.java:292)
	at ✽.o sistema deve gravar automaticamente data e hora da criação(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:60)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @Policy(AuditoriaAuto)
Scenario: RN3 - Data, hora e profissional gravados automaticamente e registro imutável (sucesso) &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:53&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-004"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                                   &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enf. Luiza"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Enfermeiro"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m                   &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma profissional registrar um histórico clínico com:&amp#27;[0m                                        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_registrar_um_histórico_clínico_com(io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | cefaleia moderada    |
    | diagnostico | Enxaqueca            |
    | conduta     | Analgésico e repouso |
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve gravar automaticamente data e hora da criação&amp#27;[0m                              &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_gravar_automaticamente_data_e_hora_da_criação()&amp#27;[0m
      &amp#27;[31mjava.lang.NullPointerException: Cannot invoke "br.com.medflow.dominio.prontuario.HistoricoClinico.getDataHoraRegistro()" because "this.historicoAtual" is null
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_gravar_automaticamente_data_e_hora_da_criação(HistoricoClinicoFuncionalidade.java:292)
	at ✽.o sistema deve gravar automaticamente data e hora da criação(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:60)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo sistema deve gravar automaticamente o profissional responsável &amp#27;[0m&amp#27;[36m&amp#27;[1m"Enf. Luiza"&amp#27;[0m              &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_gravar_automaticamente_o_profissional_responsável(java.lang.String)&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo registro salvo deve ser imutável, permitindo apenas adição de novos registros&amp#27;[0m            &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_registro_salvo_deve_ser_imutável_permitindo_apenas_adição_de_novos_registros()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="RN3 - Impedir sobrescrever registro e impedir definir data/profissional manualmente (falha)" classname="Registro de histórico clínico do paciente" time="0.004">
    <error message="The step &apos;a profissional tentar salvar um histórico clínico definindo manualmente:&apos; and 1 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@When(&quot;a profissional tentar salvar um histórico clínico definindo manualmente:&quot;)&#10;public void a_profissional_tentar_salvar_um_histórico_clínico_definindo_manualmente(io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;o sistema deve ignorar ou bloquear os campos data\\/hora e profissional enviados pelo cliente&quot;)&#10;public void o_sistema_deve_ignorar_ou_bloquear_os_campos_data_hora_e_profissional_enviados_pelo_cliente() {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a profissional tentar salvar um histórico clínico definindo manualmente:' and 1 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("a profissional tentar salvar um histórico clínico definindo manualmente:")
public void a_profissional_tentar_salvar_um_histórico_clínico_definindo_manualmente(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("o sistema deve ignorar ou bloquear os campos data\\/hora e profissional enviados pelo cliente")
public void o_sistema_deve_ignorar_ou_bloquear_os_campos_data_hora_e_profissional_enviados_pelo_cliente() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:73)
	at org.junit.platform.suite.engine.SuiteLauncher.execute(SuiteLauncher.java:63)
	at org.junit.platform.suite.engine.SuiteTestDescriptor.execute(SuiteTestDescriptor.java:128)
	at org.junit.platform.suite.engine.SuiteTestEngine.lambda$execute$0(SuiteTestEngine.java:73)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:186)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:214)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:153)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:176)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:632)
	at org.junit.platform.suite.engine.SuiteTestEngine.execute(SuiteTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:50)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]></error>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @Policy(AuditoriaAuto)
Scenario: RN3 - Impedir sobrescrever registro e impedir definir data/profissional manualmente (falha) &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:65&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-005"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                                        &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Dra. Ana Lima"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Médico"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[33mWhen &amp#27;[0m&amp#27;[33ma profissional tentar salvar um histórico clínico definindo manualmente:&amp#27;[0m
    | dataHora     | 20/09/2025 08:00 |
    | profissional | Dr. Terceiro     |
    | sintomas     | astenia          |
    | diagnostico  | Anemia leve      |
    | conduta      | Suplementação    |
  &amp#27;[36mThen &amp#27;[0m&amp#27;[36mo sistema deve ignorar ou bloquear os campos data/hora e profissional enviados pelo cliente&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo sistema deve rejeitar qualquer tentativa de sobrescrever um registro existente&amp#27;[0m                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_rejeitar_qualquer_tentativa_de_sobrescrever_um_registro_existente()&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mse for atualização, um novo registro deve ser criado mantendo o anterior inalterado&amp#27;[0m             &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.se_for_atualização_um_novo_registro_deve_ser_criado_mantendo_o_anterior_inalterado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Observação futura - Referenciar anexos para compatibilidade futura sem upload obrigatório" classname="Registro de histórico clínico do paciente" time="0.003">
    <failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:301)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_salvar_o_registro_clínico_imutável_com_metadados_de_anexos_referenciados(HistoricoClinicoFuncionalidade.java:329)
	at ✽.o sistema deve salvar o registro clínico imutável com metadados de anexos referenciados(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:87)
]]></failure>
    <system-out><![CDATA[
@boundedcontext(ProntuarioClinico) @aggregate(HistoricoClinico) @command(RegistrarHistorico)
Scenario: Observação futura - Referenciar anexos para compatibilidade futura sem upload obrigatório &amp#27;[90m# br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:79&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste o paciente &amp#27;[0m&amp#27;[32m&amp#27;[1m"PAC-006"&amp#27;[0m&amp#27;[32m cadastrado&amp#27;[0m                                                      &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.existe_o_paciente_cadastrado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo profissional &amp#27;[0m&amp#27;[32m&amp#27;[1m"Dra. Marina"&amp#27;[0m&amp#27;[32m possui perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Médico"&amp#27;[0m&amp#27;[32m e está autorizado&amp#27;[0m                         &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_profissional_possui_perfil_e_está_autorizado(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32ma profissional registrar um histórico clínico com:&amp#27;[0m                                           &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_registrar_um_histórico_clínico_com(io.cucumber.datatable.DataTable)&amp#27;[0m
    | sintomas    | dispneia leve                 |
    | diagnostico | Asma leve                     |
    | conduta     | Inalador conforme necessidade |
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma profissional informar referências de anexos &amp#27;[0m&amp#27;[32m&amp#27;[1m"RX-2025-09-21"&amp#27;[0m&amp#27;[32m e &amp#27;[0m&amp#27;[32m&amp#27;[1m"laudo-espirometria"&amp#27;[0m          &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.a_profissional_informar_referências_de_anexos_e(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[31mThen &amp#27;[0m&amp#27;[31mo sistema deve salvar o registro clínico imutável com metadados de anexos referenciados&amp#27;[0m      &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_salvar_o_registro_clínico_imutável_com_metadados_de_anexos_referenciados()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:301)
	at br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_sistema_deve_salvar_o_registro_clínico_imutável_com_metadados_de_anexos_referenciados(HistoricoClinicoFuncionalidade.java:329)
	at ✽.o sistema deve salvar o registro clínico imutável com metadados de anexos referenciados(classpath:br/com/medflow/dominio/prontuario/registro_historico_clinico.feature:87)
&amp#27;[0m
  &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mo histórico do paciente deve exibir a indicação de anexos para versões futuras&amp#27;[0m                &amp#27;[90m# br.com.medflow.dominio.prontuario.HistoricoClinicoFuncionalidade.o_histórico_do_paciente_deve_exibir_a_indicação_de_anexos_para_versões_futuras()&amp#27;[0m
]]></system-out>
  </testcase>
</testsuite>